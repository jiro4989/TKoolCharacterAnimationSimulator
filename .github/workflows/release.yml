name: release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  APP_NAME: 'tkcas'
  JAVA_VERSION: '16'
  JAVAFX_VERSION: '16'

defaults:
  run:
    shell: bash

jobs:
  build-artifact:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            os_name: windows
            os_dlname: windows
            script_ext: .bat
          - os: macOS-latest
            os_name: macos
            os_dlname: osx
            script_ext: ''
          - os: ubuntu-latest
            os_name: linux
            os_dlname: linux
            script_ext: ''
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}
          java-package: jdk
          architecture: x64
      - name: Build
        run: ORG_GRADLE_PROJECT_CI_VERSION="${GITHUB_REF##*/}" ORG_GRADLE_PROJECT_CI_COMMIT_HASH="$(git rev-parse HEAD)" ./gradlew build -x test

      - name: Create artifact
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p jmods/${{ matrix.os_name }}
          curl -o jmods/${{ matrix.os_name }}/jmods.zip -sSL https://download2.gluonhq.com/openjfx/${{ env.JAVAFX_VERSION }}/openjfx-${{ env.JAVAFX_VERSION }}_${{ matrix.os_dlname }}-x64_bin-jmods.zip
          pushd jmods/${{ matrix.os_name }}
          unzip jmods.zip
          popd
          ORG_GRADLE_PROJECT_CI_JMODS_DIR="jmods/${{ matrix.os_name }}/javafx-jmods-${{ env.JAVAFX_VERSION }}" ./gradlew jlink
          mkdir ${{ env.APP_NAME }}_${{ matrix.os_name }}
          cp -r .github/dist/* LICENSE build/libs/${{ env.APP_NAME }}-*.jar jre ${{ env.APP_NAME }}_${{ matrix.os_name }}/
          mkdir dist

          script=${{ env.APP_NAME }}_${{ matrix.os_name }}/${{ env.APP_NAME }}${{ matrix.script_ext }}
          # GNU / BSD でsedのオプションが違うのでリダイレクトしてmvする
          sed "s/{tag}/${GITHUB_REF##*/}/g" $script > $script.tmp
          mv $script.tmp $script

          case ${{ matrix.os }} in
            windows-latest)
              archive_file=${{ env.APP_NAME }}_${{ matrix.os_name }}.zip
              7z a $archive_file ${{ env.APP_NAME }}_${{ matrix.os_name }}
              ;;
            *)
              archive_file=${{ env.APP_NAME }}_${{ matrix.os_name }}.tar.gz
              tar czf $archive_file ${{ env.APP_NAME }}_${{ matrix.os_name }}
              ;;
          esac

          mv $archive_file dist/
      - uses: actions/upload-artifact@v3
        with:
          name: artifact-${{ matrix.os }}
          path: |
            dist/*.tar.gz
            dist/*.zip

  create-release:
    runs-on: ubuntu-latest
    needs:
      - build-artifact
    steps:
      - uses: actions/checkout@v4
      - name: Generate changelog
        run: |
          wget https://github.com/git-chglog/git-chglog/releases/download/0.9.1/git-chglog_linux_amd64
          chmod +x git-chglog_linux_amd64
          mv git-chglog_linux_amd64 git-chglog
          ./git-chglog --output ./changelog $(git describe --tags $(git rev-list --tags --max-count=1))
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body_path: ./changelog
          draft: false
          prerelease: false

      - name: Write upload_url to file
        run: echo '${{ steps.create-release.outputs.upload_url }}' > upload_url.txt

      - uses: actions/upload-artifact@v3
        with:
          name: create-release
          path: upload_url.txt

  upload-release:
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            asset_name_suffix: linux.tar.gz
            asset_content_type: application/gzip
          - os: windows-latest
            asset_name_suffix: windows.zip
            asset_content_type: application/zip
          - os: macOS-latest
            asset_name_suffix: macos.tar.gz
            asset_content_type: application/gzip
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: artifact-${{ matrix.os }}

      - uses: actions/download-artifact@v4
        with:
          name: create-release

      - id: vars
        run: |
          echo "::set-output name=upload_url::$(cat upload_url.txt)"
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.vars.outputs.upload_url }}
          asset_path: ${{ env.APP_NAME }}_${{ matrix.asset_name_suffix }}
          asset_name: ${{ env.APP_NAME }}_${{ matrix.asset_name_suffix }}
          asset_content_type: ${{ matrix.asset_content_type }}
